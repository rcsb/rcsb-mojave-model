variables:
  VERSION: "${CI_BUILD_REF_NAME}"
  FILENAME: "json-schema-dw-core"
  FILE_EXT: "tar.gz"

stages:
  - build
  - test

# Build branches and tags
build-locker-job:
  stage: build
  script:
    # Handy for debugging
    - whoami
    - hostname
    - pwd
    - mvn -v

    # Build via maven
    - mvn --batch-mode --errors -U clean install

    - echo "JSON schemas version "${VERSION}
    - FILENAME_VERSION=$FILENAME"_"$VERSION"."$FILE_EXT
    - echo "Latest versioned file name "${FILENAME_VERSION}

    # Produce schema artifacts
    - cd target/generated-sources/schema
    - echo "Will create "${FILENAME_VERSION}
    - tar -cvzf ${FILENAME_VERSION} core/

    # Send artifacts to build locker
    - sshpass -p 3ffd8b48e7ed9f sftp transporter@bl-receive.rcsb.org:5-schema <<< $"put ${FILENAME_VERSION}"
  tags:
    - Java8-Nexus3

# Deploy BRANCHES only.
# Problem: gitlab will not find the same commit to be duplicate if it comes in a tag and in
# a branch (discussed here: https://gitlab.com/gitlab-org/gitlab-foss/-/issues/28979).
#
# This causes these problems:
# - if building both branches and tags (and pushing of both are far apart in time), gitlab CI will build both but
#   one of the 2 will fail because nexus will not accept a duplicate jar for a stable (not-SNAPSHOT) release
# - if building branches only (and pushing the release commit and the next-dev-cycle commit close in time),
#   gitlab can miss building the release commit in branch. To avoid this, release commit and next-dev-cycle
#   commit must be in different branches.
#
# By deploying TAGS only, we make sure that the stable releases are always published to nexus avoiding the 2 problems
# described above. What we don't get is SNAPSHOT releases in nexus, but for this project that's a minor issue.
deploy-job:
  script:
    - whoami
    - hostname
    - pwd
    - mvn -v
    - mvn --batch-mode --errors -U clean deploy
  stage: build
  only:
    - branches
  tags:
    - Java8-Nexus3

